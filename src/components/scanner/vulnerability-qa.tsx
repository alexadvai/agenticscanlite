"use client";

import { useState } from "react";
import type { Vulnerability } from "@/lib/types";
import { explainVulnerability } from "@/ai/flows/explain-vulnerability";
import { Button } from "@/components/ui/button";
import { Sparkles, Loader2 } from "lucide-react";
import { Card, CardContent } from "../ui/card";

interface VulnerabilityQAProps {
  vulnerability: Vulnerability;
}

export default function VulnerabilityQA({ vulnerability }: VulnerabilityQAProps) {
  const [explanation, setExplanation] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleExplain = async () => {
    setIsLoading(true);
    setError(null);
    setExplanation("");
    
    const vulnerabilityDescription = `
      Vulnerability Type: ${vulnerability.type}
      Severity: ${vulnerability.severity}
      Impacted URL: ${vulnerability.url}
      Description: ${vulnerability.description}
      Payload / Details: ${vulnerability.payload}
    `;

    try {
      const result = await explainVulnerability({ vulnerabilityDescription });
      setExplanation(result.explanation);
    } catch (err) {
      console.error("Failed to get explanation:", err);
      setError("An error occurred while fetching the explanation. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="mt-4 border-t pt-4">
      <div className="flex items-center justify-between">
        <h4 className="text-sm font-semibold text-foreground">AI Assistant</h4>
        <Button onClick={handleExplain} disabled={isLoading} size="sm" variant="outline">
          {isLoading ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Sparkles className="mr-2 h-4 w-4" />
          )}
          Explain this vulnerability
        </Button>
      </div>

      {isLoading && (
         <Card className="mt-4 bg-muted/50">
            <CardContent className="p-4">
                 <div className="flex items-center space-x-3">
                    <Loader2 className="h-5 w-5 animate-spin text-primary" />
                    <p className="text-sm text-muted-foreground">The AI is analyzing the vulnerability...</p>
                 </div>
            </CardContent>
         </Card>
      )}

      {error && (
        <Card className="mt-4 border-destructive bg-destructive/10">
          <CardContent className="p-4">
            <p className="text-sm text-destructive">{error}</p>
          </CardContent>
        </Card>
      )}

      {explanation && (
        <Card className="mt-4 bg-primary/5">
            <CardContent className="p-4">
                <div className="prose prose-sm dark:prose-invert max-w-none whitespace-pre-wrap">
                    {explanation}
                </div>
            </CardContent>
        </Card>
      )}
    </div>
  );
}
